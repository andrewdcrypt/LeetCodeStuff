Description: Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.


Method One:

setup variables for the array length and then sort the array
init variables for prev_num and count
use loop to check if index is zero to set the prev_num with nums index value
and count increment by 1
everything else from that point will check if prev_num is equal to current nums index value
and increment count if so otherwise if not check count if its less than 2, if so break loop
else change prev_num value to the current nums index value and set count back to 1

func singleNumber(nums []int) int {
    
    arr_len := len(nums)
    sort.Ints(nums)
    
    prev_num := 0
    count := 0;
    
    for index:=0; index < arr_len; index += 1 {
        
        if index == 0 {
            prev_num = nums[index]
            count += 1
        }else{
            
            if prev_num == nums[index] {
                count += 1
            }else{
                if count < 2 {
                    break
                }else{
                    prev_num = nums[index]
                    count = 1                    
                }
            }
            
        }
    }
    
    return prev_num    
}
